/*****************************************************************************************************************************************************************
@ Class:         AdRevenueMonthlyTriggerHandlerTest
@ Version:        1.0
@ Author:         Sophal Noch (sophal.noch@gaea-sys.com)
@ Purpose:        US-0008908 test class for AdRevenueMonthlyTriggerHandler
----------------------------------------------------------------------------------------------------------------------------------------------------------
@ Change history:  08.02.2021 / Sophal Noch / Created the class.
***********************************************************************************************************************************************************/
@isTest
private without sharing class AdRevenueMonthlyTriggerHandlerTest {
    
    private static Account seller;
    private static Opportunity opp;

    private static Date startDate;
    private static Date endDate;

    private static Quote quote1;

    private static Site__c site;
    private static Product2 prod1;

    private static Id book1Id;

    private static PriceBookEntry pbe1;

    private static QuoteLineItem qli1;

    private static byPass__c bp;

    // setup method
    static void setUpData(){


        bp = new byPass__c(SetupOwnerId = UserInfo.getUserId(), triggerObjects__c = 'Quote QuoteLineItem', byPass_Trigger__c = false, byPass_WFRule__c = false);
        insert bp;

        AdRevenueMonthlyTriggerHandler.runAsFuture = false;

        List<Account> sellers = EBH_TestDataFactory.createAccounts(1, 'EBH_Seller');
        seller = sellers[0];

        opp = new Opportunity(AccountId = seller.Id, Name = 'Test Opp',StageName='Qualified Meeting',CloseDate=Date.newInstance( 2021, 1, 1));
        insert opp;

        site = TST_DataGenerator.generateSite();
        insert site;

        prod1 = TST_DataGenerator.generateProduct(site.Id);
        insert prod1;

        book1Id = Test.getStandardPriceBookId();
        
        pbe1 = TST_DataGenerator.generatePricebookEntry(prod1.id, book1Id);
        insert pbe1;

        quote1 = new Quote(Name = 'q1', Status= 'Draft', OpportunityId = opp.Id, Pricebook2Id = book1Id, Is_Revised_Quote__c = false, Primary_Quote__c = true);

        insert quote1;

        quote1.RecordTypeId = ApexUtil.getRecordTypeByName('Quote','eBay_Advertising').Id;
        quote1.Primary_Quote__c= true;
        update quote1;
        

        qli1 = TST_DataGenerator.generateQuoteLinItem( quote1.id, prod1.id, pbe1.id);
        qli1.Budget__c = 100;
        qli1.from_Date__c = Date.today().addMonths(-1);
        qli1.until_Date__c = Date.today().addMonths(11);
           
        
    }



    static testMethod void testUpdateDeliverySummeMonthlyFixPrice(){

        setUpData();
        insert qli1;

        Ad_Product__c adProd = [Select Id,(Select Id, Delivered_AI__c From Ad_Revenue_Monthly__r  Order by Transaction_Date__c ASC) From Ad_Product__c Where Quote_Line_Item__c =: qli1.Id];
        System.assertNotEquals(null, adProd.Id);

        opp.Order_Id__c = '1';
        update opp;
        adProd.Ad_Id__c = '1';
        adProd.Booked_Quantity__c = 1000;
        adProd.Quantity__c = 1000;
        adProd.Billing_Category__c = 'Fix Price';
        update adProd;

        Ad_Product__c adProdAfterQuery = [Select Id,Billing_Category__c From Ad_Product__c Where Id =: adProd.Id];
        System.assertEquals(('Fix Price'.toLowerCase()), (adProdAfterQuery.Billing_Category__c.toLowerCase()));

        Date today = System.today();
        List<Ad_Revenue_Monthly__c> listMonthlyAfterUpdate = new List<Ad_Revenue_Monthly__c>();

        for(Ad_Revenue_Monthly__c eachMonthly : adProd.Ad_Revenue_Monthly__r){
            eachMonthly.Delivered_AI__c = eachMonthly.Delivered_AI__c == null ? 0 : eachMonthly.Delivered_AI__c;
            eachMonthly.Delivered_AI__c = Integer.valueOf(eachMonthly.Delivered_AI__c) + 1;
        }
        update adProd.Ad_Revenue_Monthly__r;

    
        listMonthlyAfterUpdate = [Select Id,Invoice_Quantity__c,Monthly_Quantity__c,Delivered_Sum__c, Transaction_Date__c From Ad_Revenue_Monthly__c Where Ad_Product__c =:adProd.Id Order by Transaction_Date__c ASC];
        System.assertEquals(1, listMonthlyAfterUpdate[0].Monthly_Quantity__c);
        System.assertEquals(1, listMonthlyAfterUpdate[0].Invoice_Quantity__c);
        System.assertEquals(1, listMonthlyAfterUpdate[0].Delivered_Sum__c);

        Decimal monthlyQuantityOfFixPrice = listMonthlyAfterUpdate[0].Monthly_Quantity__c;
        Decimal deliveredSum = monthlyQuantityOfFixPrice;
        
        for(Ad_Revenue_Monthly__c eachMonthly : listMonthlyAfterUpdate){

            //if(eachMonthly.Transaction_Date__c <= today){
                System.assertEquals(1, eachMonthly.Invoice_Quantity__c);
                System.assertEquals(deliveredSum, eachMonthly.Delivered_Sum__c);
                deliveredSum = deliveredSum + monthlyQuantityOfFixPrice;

            // }else{
            //     System.assertEquals(null, eachMonthly.Invoice_Quantity__c);
            //     System.assertEquals(null, eachMonthly.Delivered_Sum__c);
            // }
           
        }

        
       // test future method
        for(Ad_Revenue_Monthly__c eachMonthly : adProd.Ad_Revenue_Monthly__r){

            // make trigger run again
            eachMonthly.Delivered_AI__c = eachMonthly.Delivered_AI__c == null ? 0 : eachMonthly.Delivered_AI__c;
            eachMonthly.Delivered_AI__c = Integer.valueOf(eachMonthly.Delivered_AI__c) + 1;
            eachMonthly.Delivered_Sum__c = null; 
        }
        AdRevenueMonthlyTriggerHandler.runAsFuture = true;
        Test.startTest();
            update adProd.Ad_Revenue_Monthly__r;
        Test.stopTest();

        listMonthlyAfterUpdate.clear();
        listMonthlyAfterUpdate = [Select Id,Invoice_Quantity__c,Monthly_Quantity__c,Delivered_Sum__c,Transaction_Date__c From Ad_Revenue_Monthly__c Where Ad_Product__c =:adProd.Id Order by Transaction_Date__c ASC];
        System.assertEquals(1, listMonthlyAfterUpdate[0].Monthly_Quantity__c);
        System.assertEquals(1, listMonthlyAfterUpdate[0].Invoice_Quantity__c);
        System.assertEquals(1, listMonthlyAfterUpdate[0].Delivered_Sum__c);

        monthlyQuantityOfFixPrice = listMonthlyAfterUpdate[0].Monthly_Quantity__c;
        deliveredSum = monthlyQuantityOfFixPrice;

        for(Ad_Revenue_Monthly__c eachMonthly : listMonthlyAfterUpdate){

            // if(eachMonthly.Transaction_Date__c <= today){
                System.assertEquals(1, eachMonthly.Invoice_Quantity__c);
                System.assertEquals(deliveredSum, eachMonthly.Delivered_Sum__c);
                deliveredSum = deliveredSum + monthlyQuantityOfFixPrice;

            // }else{
            //     System.assertEquals(null, eachMonthly.Invoice_Quantity__c);
            //     System.assertEquals(null, eachMonthly.Delivered_Sum__c);
            // }
        }


    }



    static testMethod void testUpdateDeliverySummeMonthlyCPM(){

        setUpData();
        insert qli1;

        Ad_Product__c adProd = [Select Id,(Select Id From Ad_Revenue_Monthly__r  Order by Transaction_Date__c ASC) From Ad_Product__c Where Quote_Line_Item__c =: qli1.Id];
        System.assertNotEquals(null, adProd.Id);

        opp.Order_Id__c = '1';
        update opp;
        adProd.Ad_Id__c = '1';
        adProd.Booked_Quantity__c = 1000;
        adProd.Quantity__c = 1000;
        adProd.Billing_Category__c = 'CPM';
        update adProd;

        Ad_Product__c adProdAfterQuery = [Select Id,Billing_Category__c From Ad_Product__c Where Id =: adProd.Id];
        System.assertEquals('CPM', adProdAfterQuery.Billing_Category__c);

        Date today = System.today();
        List<Ad_Revenue_Monthly__c> listMonthlyAfterUpdate = new List<Ad_Revenue_Monthly__c>();

        Decimal deliveredAiIncrement = 10;

        for(Ad_Revenue_Monthly__c eachMonthly : adProd.Ad_Revenue_Monthly__r){
            eachMonthly.Delivered_AI__c = deliveredAiIncrement;
        }
        update adProd.Ad_Revenue_Monthly__r;

    
        listMonthlyAfterUpdate = [Select Id,Invoice_Quantity__c,Monthly_Quantity__c,Delivered_Sum__c, Booked_Quantity__c, Transaction_Date__c From Ad_Revenue_Monthly__c Where Ad_Product__c =:adProd.Id Order by Transaction_Date__c ASC];
        System.assertEquals(deliveredAiIncrement, listMonthlyAfterUpdate[0].Monthly_Quantity__c);
        System.assertEquals(deliveredAiIncrement, listMonthlyAfterUpdate[0].Invoice_Quantity__c);
        System.assertEquals(deliveredAiIncrement, listMonthlyAfterUpdate[0].Delivered_Sum__c);

        Decimal monthlyQuantityOfCmp = deliveredAiIncrement;
        Decimal deliveredSum = monthlyQuantityOfCmp;
        
        for(Ad_Revenue_Monthly__c eachMonthly : listMonthlyAfterUpdate){

            // if(eachMonthly.Transaction_Date__c <= today){

                if (eachMonthly.Booked_Quantity__c >= deliveredSum) {

                    System.assertEquals(monthlyQuantityOfCmp, eachMonthly.Invoice_Quantity__c);
                    System.assertEquals(deliveredSum, eachMonthly.Delivered_Sum__c);

                }else if (eachMonthly.Booked_Quantity__c >= (deliveredSum - monthlyQuantityOfCmp)) {
                    System.assertEquals((eachMonthly.Booked_Quantity__c - (deliveredSum - monthlyQuantityOfCmp)), eachMonthly.Invoice_Quantity__c);
                }else{
                    System.assertEquals(0, eachMonthly.Invoice_Quantity__c);
                }


                
                deliveredSum = deliveredSum + monthlyQuantityOfCmp;

            // }else{
            //     System.assertEquals(null, eachMonthly.Invoice_Quantity__c);
            //     System.assertEquals(null, eachMonthly.Delivered_Sum__c);
            // }
           
        }


        // test future method
        deliveredAiIncrement = 43;
        for(Ad_Revenue_Monthly__c eachMonthly : adProd.Ad_Revenue_Monthly__r){
            eachMonthly.Delivered_AI__c = deliveredAiIncrement;
        }

        AdRevenueMonthlyTriggerHandler.runAsFuture = true;
        Test.startTest();
        update adProd.Ad_Revenue_Monthly__r;
        Test.stopTest();

    
        listMonthlyAfterUpdate = [Select Id,Invoice_Quantity__c,Monthly_Quantity__c,Delivered_Sum__c, Booked_Quantity__c, Transaction_Date__c From Ad_Revenue_Monthly__c Where Ad_Product__c =:adProd.Id Order by Transaction_Date__c ASC];
        System.assertEquals(deliveredAiIncrement, listMonthlyAfterUpdate[0].Monthly_Quantity__c);
        System.assertEquals(deliveredAiIncrement, listMonthlyAfterUpdate[0].Invoice_Quantity__c);
        System.assertEquals(deliveredAiIncrement, listMonthlyAfterUpdate[0].Delivered_Sum__c);

        monthlyQuantityOfCmp = deliveredAiIncrement;
        deliveredSum = monthlyQuantityOfCmp;
        
        for(Ad_Revenue_Monthly__c eachMonthly : listMonthlyAfterUpdate){

            // if(eachMonthly.Transaction_Date__c <= today){
                
                if (eachMonthly.Booked_Quantity__c >= deliveredSum) {
                    System.assertEquals(monthlyQuantityOfCmp, eachMonthly.Invoice_Quantity__c);
                } else if (eachMonthly.Booked_Quantity__c >= (deliveredSum - monthlyQuantityOfCmp)) {
                    System.assertEquals((eachMonthly.Booked_Quantity__c - (deliveredSum - monthlyQuantityOfCmp)), eachMonthly.Invoice_Quantity__c);
                }else{
                    System.assertEquals(0, eachMonthly.Invoice_Quantity__c);
                }

                System.assertEquals(deliveredSum, eachMonthly.Delivered_Sum__c);
                deliveredSum = deliveredSum + monthlyQuantityOfCmp;

            // }else{
            //     System.assertEquals(null, eachMonthly.Invoice_Quantity__c);
            //     System.assertEquals(null, eachMonthly.Delivered_Sum__c);
            // }
           
        }
    
    }

    static testMethod void testBookedQuantityAndTotalPriceExcceed(){

        // Sophal / 08.04.2021 / US-0009328

        setUpData();
         // total 4 months 
        qli1.from_Date__c = Date.today().addMonths(-4);
        qli1.until_Date__c = Date.today().addMonths(-1);

        insert qli1;

        Ad_Product__c adProd = [Select Id,until_date__c From Ad_Product__c Where Quote_Line_Item__c =: qli1.Id];
        System.assertNotEquals(null, adProd.Id);

        opp.Order_Id__c = '1';
        update opp;
        adProd.Ad_Id__c = '1';
        adProd.Booked_Quantity__c = 10;
        adProd.Quantity__c = 10;
        adProd.Billing_Category__c = 'CPM';
        adProd.Net_Net_Net__c = 1;
        adProd.TotalPrice__c = 1000;
        adProd.Amount_Net2eBay__c = 1;  // Sophal / 28.09.2021 / US-0010526 fix this test method after formula field Ad_Revenue_Monthly__c.Invoice_amount__c changed.

        // adProd.Product_Startdate__c = qli1.from_Date__c;
        // adProd.Product_Enddate__c = qli1.from_Date__c;

       
        update adProd;

        List<Ad_Revenue_Monthly__c> listReMonthly = [Select Id, Transaction_Date__c from Ad_Revenue_Monthly__c Where Ad_Product__c =: adProd.Id Order By Transaction_Date__c ASC]; 

        System.assertEquals(4, listReMonthly.size());

        System.assertEquals(Date.today().addMonths(-4).month(), listReMonthly[0].Transaction_Date__c.month());
        System.assertEquals(Date.today().addMonths(-3).month(),listReMonthly[1].Transaction_Date__c.month());
        System.assertEquals(Date.today().addMonths(-2).month(),listReMonthly[2].Transaction_Date__c.month());
        System.assertEquals(Date.today().addMonths(-1).month(),listReMonthly[3].Transaction_Date__c.month());



        listReMonthly[0].X3rd_Party_AI__c = 5;
        listReMonthly[1].X3rd_Party_AI__c = 5;
        listReMonthly[2].X3rd_Party_AI__c = 2;
        listReMonthly[3].X3rd_Party_AI__c = 1;

        listReMonthly[0].X3rd_Party_Monthly_Gross__c = null;
        listReMonthly[1].X3rd_Party_Monthly_Gross__c = null;
        listReMonthly[2].X3rd_Party_Monthly_Gross__c = null;
        listReMonthly[3].X3rd_Party_Monthly_Gross__c = null;

        update listReMonthly;

        listReMonthly = [Select Id, X3rd_Party_AI__c, Invoice_Quantity__c, Is_Exceeding_BookedQuantity__c,Invoice_amount__c, Invoice_Amount2__c from Ad_Revenue_Monthly__c Where Ad_Product__c =: adProd.Id Order By Transaction_Date__c ASC]; 

        System.assertEquals(listReMonthly[0].X3rd_Party_AI__c, listReMonthly[0].Invoice_Quantity__c);
        System.assertEquals(listReMonthly[1].X3rd_Party_AI__c, listReMonthly[1].Invoice_Quantity__c);
        System.assertEquals(0, listReMonthly[2].Invoice_Quantity__c);
        System.assertEquals(0, listReMonthly[3].Invoice_Quantity__c);


        /* Sophal:28/06/2021: US-0009797 we are no longer use Monthly_Quantity__c to check if Booked_Quantity__c is exceeded or not

            // System.assertEquals(false, listReMonthly[0].Is_Exceeding_BookedQuantity__c);
            // System.assertEquals(false, listReMonthly[1].Is_Exceeding_BookedQuantity__c);
            // System.assertEquals(true, listReMonthly[2].Is_Exceeding_BookedQuantity__c);
            // System.assertEquals(true, listReMonthly[3].Is_Exceeding_BookedQuantity__c);

        */

        System.assertEquals(false, listReMonthly[0].Is_Exceeding_BookedQuantity__c);
        System.assertEquals(false, listReMonthly[1].Is_Exceeding_BookedQuantity__c);
        System.assertEquals(false, listReMonthly[2].Is_Exceeding_BookedQuantity__c);
        System.assertEquals(false, listReMonthly[3].Is_Exceeding_BookedQuantity__c);

        System.assertNotEquals(null,listReMonthly[0].Invoice_amount__c);
        System.assertNotEquals(null,listReMonthly[1].Invoice_amount__c);
        System.assertNotEquals(null,listReMonthly[2].Invoice_amount__c);
        System.assertNotEquals(null,listReMonthly[3].Invoice_amount__c);

        System.assert(listReMonthly[0].Invoice_amount__c > 0);
        System.assert(listReMonthly[1].Invoice_amount__c > 0);
        System.assert(listReMonthly[2].Invoice_amount__c == 0);
        System.assert(listReMonthly[3].Invoice_amount__c == 0);


        System.assertEquals(listReMonthly[0].Invoice_amount__c, listReMonthly[0].Invoice_Amount2__c);
        System.assertEquals(listReMonthly[1].Invoice_amount__c, listReMonthly[1].Invoice_Amount2__c);
        System.assertEquals(listReMonthly[2].Invoice_amount__c, listReMonthly[2].Invoice_Amount2__c);
        System.assertEquals(listReMonthly[3].Invoice_amount__c, listReMonthly[3].Invoice_Amount2__c);

        Test.startTest();
        adProd = [Select Id,TotalPrice__c, Total_Invoice_Amount__c, TotalPrice_Is_Exceeded__c From Ad_Product__c Where Id =: adProd.Id];

    
        System.assertEquals(false, adProd.TotalPrice_Is_Exceeded__c);

        adProd.Net_Net_Net__c = 10000000;
        adProd.Amount_Net2eBay__c = 10000000; // Sophal / 28.09.2021 / US-0010526 fix this test method after formula field Ad_Revenue_Monthly__c.Invoice_amount__c changed.
        
        update adProd;
        

        adProd = [Select Id,TotalPrice__c, Total_Invoice_Amount__c, TotalPrice_Is_Exceeded__c From Ad_Product__c Where Id =: adProd.Id];

        System.assertEquals(true, adProd.TotalPrice_Is_Exceeded__c);


        // Sophal:28/06/2021: US-0009797 we use invoice quantity direct to check if Booked_Quantity__c is exceeded or not
        listReMonthly[0].Invoice_Quantity__c = 10000000;
        update listReMonthly[0];
        listReMonthly = [Select Id, X3rd_Party_AI__c, Invoice_Quantity__c, Is_Exceeding_BookedQuantity__c,Invoice_amount__c, Invoice_Amount2__c from Ad_Revenue_Monthly__c Where Ad_Product__c =: adProd.Id Order By Transaction_Date__c ASC]; 
        System.assertEquals(true, listReMonthly[0].Is_Exceeding_BookedQuantity__c);
        System.assertEquals(true, listReMonthly[1].Is_Exceeding_BookedQuantity__c);
        System.assertEquals(true, listReMonthly[2].Is_Exceeding_BookedQuantity__c);
        System.assertEquals(true, listReMonthly[3].Is_Exceeding_BookedQuantity__c);

        

        Test.stopTest();
        


       
    }



}